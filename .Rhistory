View(CC)
x = sample (CC[,1],380671, repeat = T)
x = sample (CC[,1],380671, replace= T)
y = CC[ match(x, UMPCs[,10]), 2 ]
UMPCs$Organisation.Type = y
View(UMPCs)
View(UMPCs)
View(UMPCs)
View(UMPCs)
UMPCs <- read.csv("C:/Users/User/Downloads/UMPCs.csv", header=FALSE)
View(UMPCs)
x = sample (CC[,1],380671, replace= T)
y = CC[ match(x, UMPCs[,10]), 2 ]
UMPCs$Organisation.Type = y
x = sample (CC[,1],380672, replace= T)
y = CC[ match(x, UMPCs[,10]), 2 ]
UMPCs$Organisation.Type = y
x = sample (CC[,1],380672, replace= T)
y = CC[ match(x, UMPCs[,10]), 1 ]
UMPCs$Organisation.Type = y
x = sample (CC[,2],380672, replace= T)
y = CC[ match(x, UMPCs[,10]), 2 ]
UMPCs$Organisation.Type = y
x = sample (CC[,1],380672, repeat = t )
x = sample (CC[,1], repeat = t )
x =  (CC[,1], repeat = t )
y = CC[ match(CC, UMPCs[,10]), 2 ]
UMPCs$Organisation.Type = y
x =  (CC[,1], )
y =  match(CC, UMPCs[,10]), 2 ]
y = match(CC, UMPCs[,10], 2 )
UMPCs$Organisation.Type = y
y = match(CC[,1], UMPCs[,10], 2 )
UMPCs$Organisation.Type = y
x = sample (CC[,1],duplicates.ok = T)
x = sample (CC[,1])
y = CC[ match(x, UMPCs[,10]), 2,duplicates.ok = T ]
x = (CC[,1])
y = CC[ match(x, UMPCs[,10]), 2,duplicates.ok = T ]
CC <- read.csv("C:/Users/User/Downloads/CC.csv")
View(CC)
merge(CC, UMPCs, by="Organisation.Name")
merge(CC, UMPCs, by="Organisation.Name,Organisation.Name")
merge(CC, UMPCs, by="Organisation.Name")
merge(CC, UMPCs, by="B,J")
View(UMPCs)
View(UMPCs)
map = cbind(c("one","two", "three"), c("red","green", "blue"))
x = sample(c(map[,1], "four"), 30, replace=TRUE)
y = map[ match(x, map[,1]), 2 ]
view y
y
x
x = sample (CC[,1],size = 380672, replace = T)
y = CC[ match(x, UMPCs[,10]), 2 ]
y
x = sample (CC[,1],size = 380671, replace = T)
y = CC[ match(x, UMPCs[,10]), 2 ]
y
x = sample (CC[,1], replace = T)
y = CC[ match(x, UMPCs[,10]), 2 ]
y
x = sample (CC[,1], size = UMPCs[,10], replace = T)
y = CC[ match(x, UMPCs[,10]), 2 ]
y
FUN = function(x) {
if(length(x) < 2) return(x)
else return(x[1])
}
fun
x
x = sample ( c ( CC[,1]) )
y = CC [ match(x, UMPCs[,3]), 2 ]
tmp = read.csv("~/Downloads/UMPCs.csv", header=FALSE)
Test <- read.table("C:/Users/User/Downloads/Test.csv", quote="\"", comment.char="")
View(Test)
Test <- read.table("C:/Users/User/Downloads/Test.csv", quote="\"", comment.char="")
View(Test)
Test <- read.csv("C:/Users/User/Downloads/Test.csv", sep="")
View(Test)
= sub("ECORP LTD", "IT", CC, ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y= sub("ECORP LTD", "IT", CC, ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y
y= sub("ECORP LTD", "IT", "cc[,1]", ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y
View(CC)
y= sub("ECORP LTD", "IT", "cc[,1]", ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y
y= sub("ECORP LTD", "IT", "cc$Organisation.Name", ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y
y =  CC$V2
y= sub("ECORP LTD", "IT", "cc$Organisation.Name", ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y
x =  CC$V2
y = sub("ECORP LTD", "IT", "x", ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y
Test <- read.csv("C:/Users/User/Downloads/Test.csv", sep="")
View(Test)
Test <- read.table("C:/Users/User/Downloads/Test.csv", quote="\"", comment.char="")
View(Test)
y = sub("ECORP LTD", "IT", "CC[,1]", ignore.case = FALSE, perl = FALSE,fixed = TRUE, useBytes = FALSE)
y
"A second pattern is also listed here")
install.packages("rmarkdown")
prop.test(170, 244, conf.level = 0.95)
X <- matrix(c(46, 123, 15, 31, 13, 16), ncol = 3)
colnames(X) <- c("<25", "25-34", "35+")
rownames(X) <- c("Female", "Male")
print(X)
chisq.test(X)
fisher.test(X)
UM <- read.csv("G:/Quantitative Project/Data Mining and Cleaning/UM.csv")
View(UM)
head(UM$Area == "Rest of NT")
UM <- read.csv("C:/Users/A/Dropbox/Quantitative Project/Data Mining and Cleaning/UM.csv")
NumEntries = c(268, 276, 283, 289, 295, 299, 304, 307, 311, 314)
NumTopOrg = c(70, 80, 90, 100, 110, 120, 130, 140, 150, 160)
percentage = NumEntries/380
ORGSUM = data.frame(NumEntries, NumTopOrg, percentage)
print(ORGSUM)
binom.test(4,70,p=0.2)
UML = subset(UM, Year > 1960 & Year < 2009)
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
View(UM)
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM[,c(Amount, Year, Organisation.Type, Area, Classified)])
UM2 = na.omit(UM[,c( Year, Organisation.Type, Area, Classified)])
UM2 = na.omit(UM[("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM("Amount"))
UM2 = na.omit("Amount")
UM2
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified",)])
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM[c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(UM[1,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UM2 = na.omit(c(UM$Amount, UM$Year, UM$Organisation.Type, UM$Area, UM$Classified))
head UM2
head(UM2)
UM2
UM2 = data.frame(na.omit(c(UM$Amount, UM$Year, UM$Organisation.Type, UM$Area, UM$Classified)))
View(UM2)
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
dates = as.Date(UM$Date, format="%d-%b-%y")
UM$Classified= as.numeric(format(dates,"%Y"))
write.csv(UM, file = "UM.csv", row.names = FALSE)
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UML = subset(UM2, Year > 1960 & Year < 2009)
GammaAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family = Gamma(link = "log"), data=UML)
qqnorm(residuals(GammaAmount), pch=16, ylab="Residuals", xlab = "Amount")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="Residuals", xlab="Fitted Means")
plot(residuals(GammaAmount) ~ UM2$Year, pch=16, ylab="Residuals", xlab="Fitted Means")
plot(residuals(GammaAmount) ~ UM2$Year, pch=16, ylab="Residuals", xlab="Fitted Means")
plot(residuals(GammaAmount) ~ UM$Year, pch=16, ylab="Residuals", xlab="Fitted Means")
plot(residuals(GammaAmount) ~ UM$Year, pch=16, ylab="Residuals", xlab="Fitted Means")
plot(residuals(GammaAmount) ~ UM2$Year, pch=16, ylab="Residuals", xlab="Fitted Means")
View(UM2)
plot(residuals(GammaAmount) ~ Year, pch=16, ylab="Residuals", xlab="Fitted Means")
GammaAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family = Gamma(link = "log"), data=UM2)
GammaAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family = Gamma(link = "log"), data=UML)
plot(residuals(GammaAmount) ~ UML$Year, pch=16, ylab="Residuals", xlab="Fitted Means")
qqline(residuals(GammaAmount))
qqnorm(residuals(GammaAmount), pch=16, ylab="Residuals", xlab = "Amount")
InverseGaussianAmount = glm(Amount ~ Year + Organisation.Type + Area + Classified, family = inverse.gaussian(link = "1/mu^2"), data = UML)
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="Residuals", xlab="Fitted Means")
plot(residuals(GammaAmount) ~ UML$Year, pch=16, ylab="Residuals", xlab="Fitted Means")
res <- residualsAnscombe(Freq, mu=AnscombeAccounts.nopoly$root1$fitted.values, family=poisson(link = "log"), data = Counts)
require(wle)
res <- residualsAnscombe(Freq, mu=AnscombeAccounts.nopoly$root1$fitted.values, family=poisson(link = "log"), data = Counts)
res <- residualsAnscombe(Counts$Freq, mu=AnscombeAccounts.nopoly$root1$fitted.values, family=poisson(link = "log"))
Counts = as.data.frame(xtabs(~Area+Organisation.Type+Year+Classified, data=UML))
Counts$Year = as.numeric(Counts$Year)
Counts$Classified = as.numeric(Counts$Classified)
res <- residualsAnscombe(Counts$Freq, mu=AnscombeAccounts.nopoly$root1$fitted.values, family=poisson(link = "log"))
res <- residualsAnscombe(Counts$Freq, mu=PoissonAccounts.poly3$root1$fitted.values, family=poisson(link = "log"))
PoissonAccounts.poly3 <- glm(Freq ~ Area+Organisation.Type+poly(Year,3)+poly(Classified,3), family = poisson(link = "log"), data = Counts)
res <- residualsAnscombe(Counts$Freq, mu=PoissonAccounts.poly3$root1$fitted.values, family=poisson(link = "log"))
qqnorm(res)
qqline(res)
qqnorm(res)
res <- residualsAnscombe(Freq, mu=PoissonAccounts.poly3$root1$fitted.values, family=poisson(link = "log"))
res <- residualsAnscombe(Counts$Freq, mu=PoissonAccounts.poly2$root1$fitted.values, family=poisson(link = "log"))
PoissonAccounts.wle = wle.glm(Freq ~ Area+Organisation.Type+poly(Year,3)+poly(Classified,3), family = poisson(link = "log"), data = Counts)
PoissonAccounts.wle = wle.glm(Freq ~ Area+Organisation.Type+Year+Classified, family = poisson(link = "log"), data = Counts)
T
T = matrix(c(0.00, 0.30, 0.70,0.50,0.40,0.10,1.00,0.00,0.00 ),3,3)
T
e = eigen(T)
e$vectors
e$vectors[,1]/sum(e$vectors[,1])
GaussianAmount = glm(Amount ~ Year + Organisation.Type + Area + Classified, family = gaussian(link = "log"), data=UM)
UM <- read.csv("G:/Quantitative Project/UM.csv")
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UML = subset(UM2, Year > 1960 & Year < 2009)
GaussianAmount = glm(Amount ~ Year + Organisation.Type + Area + Classified, family = gaussian(link = "log"), data=UM)
qqnorm(residuals(GaussianAmount), pch=16, ylab="Residuals", xlab = "Amount")
qqline(residuals(GaussianAmount))
plot(residuals(GaussianAmount) ~ fitted(GaussianAmount), pch=16, ylab="Residuals", xlab="Fitted Means")
require(statmod)
fit.twe = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family=tweedie(link.power=0, var.power=2.7), data = UML)
qqnorm(residuals(fit.twe), pch=16, ylab="Residuals", xlab = "Amount", main="Tweedie")
qqline(residuals(fit.twe))
plot(residuals(fit.twe) ~ fitted(fit.twe), pch=16, ylab="Residuals", xlab="Fitted Means")
GammaAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family = Gamma(link = "log"), data=UM2)
qqnorm(residuals(GammaAmount), pch=16, ylab="Residuals", xlab = "Amount")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="Residuals", xlab="Fitted Means")
PoissonAmount = glm(UM$Amount ~ UM$Year + UM$Organisation.Type + UM$Area + UM$Classified, family = poisson(link = "log"))
qqnorm(residuals(PoissonAmount), pch=16, ylab="Residuals", xlab = "Amount")
qqline(residuals(PoissonAmount))
plot(residuals(PoissonAmount) ~ fitted(PoissonAmount), pch=16, ylab="Residuals", xlab="Fitted Means")
GaussianAmount = glm(Amount ~ Year + Organisation.Type + Area + Classified, family = gaussian(link = "log"), data=UML)
qqnorm(residuals(GaussianAmount), pch=16, ylab="GaussianResiduals", xlab = "Amount")
qqline(residuals(GaussianAmount))
plot(residuals(GaussianAmount) ~ fitted(GaussianAmount), pch=16, ylab="GaussianResiduals", xlab="Fitted Means")
GammaAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family = Gamma(link = "log"), data=UML)
qqnorm(residuals(GammaAmount), pch=16, ylab="GammaResiduals", xlab = "Amount")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="GammaResiduals", xlab="Fitted Means")
GammaAmount = glm(Amount ~ Year + Organisation.Type + Area + Classified, family = Gamma(link = "log"), data=UML)
qqnorm(residuals(GammaAmount), pch=16, ylab="GammaResiduals", xlab = "Amount")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="GammaResiduals", xlab="Fitted Means")
PoissonAmount = glm(Amount ~ Year + Organisation.Type + Area + Classified, family = poisson(link = "log"), data=UML)
qqnorm(residuals(PoissonAmount), pch=16, ylab="PoissonResiduals", xlab = "Amount")
qqline(residuals(PoissonAmount))
plot(residuals(PoissonAmount) ~ fitted(PoissonAmount), pch=16, ylab="PoissonResiduals", xlab="Fitted Means")
warnings()
GammaAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + poly(Classified,2) , family = Gamma(link = "log"), data=UML)
qqnorm(residuals(GammaAmount), pch=16, ylab="GammaResiduals", xlab = "Amount")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="GammaResiduals", xlab="Fitted Means")
plot(residuals(PoissonAccounts) ~ Counts$Year, pch=16, ylab="Residuals", xlab="Fitted Means",  main = "Trend in Residuals")
plot(residuals(GammaAmount) ~ Counts$Year, pch=16, ylab="Residuals", xlab="Fitted Means",  main = "Trend in Residuals")
plot(residuals(GammaAmount) ~ Year, pch=16, ylab="Residuals", xlab="Fitted Means",  main = "Trend in Residuals")
plot(residuals(GammaAmount) ~ UML$Year, pch=16, ylab="Residuals", xlab="Fitted Means",  main = "Trend in Residuals")
plot(residuals(GaussianAmount) ~ UML$Year, pch=16, ylab="Residuals", xlab="Fitted Means",  main = "Trend in Residuals")
plot(residuals(GaussianAmount) ~ UML$Year, pch=16, ylab="GaussianResiduals", xlab="Fitted Means",  main = "Trend in Residuals")
qqnorm(residuals(PoissonAccounts), pch=16, ylab="Residuals",
xlab = "Number of Accounts", main = "Poisson Distribution with no polynomial transform")
qqline(residuals(PoissonAccounts))
GammaAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + poly(Classified,2) , family = Gamma(link = "log"), data=UML)
qqnorm(residuals(GammaAmount), pch=16, ylab="GammaResiduals", xlab = "Amount")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="GammaResiduals", xlab="Fitted Means")
fit.tweedie = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family=tweedie(link.power=0, var.power=2.7), data = UML)
qqnorm(residuals(tweedie), pch=16, ylab="Residuals", xlab = "Amount", main="Tweedie")
qqline(residuals(tweedie))
plot(residuals(tweedie) ~ fitted(tweedie), pch=16, ylab="Residuals", xlab="Fitted Means")
TweedieAmount = glm(Amount ~ poly(Year,2) + Organisation.Type + Area + Classified, family=tweedie(link.power=0, var.power=2.7), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab="Fitted Means")
NormalAmount = lm(Amount ~ poly(Year,2) + Organisation.Type + Area + poly(Classified,2), data = UML)
qqnorm(residuals(NormalAmount), pch=16, ylab="Residuals", xlab = "Amount")
qqline(residuals(NormalAmount))
plot(residuals(NormalAmount) ~ fitted(NormalAmount), pch=16, ylab="Residuals", xlab="Fitted Means")
LogNormalAmount = lm(Amount ~ poly(Year,2) + Organisation.Type + Area + poly(Classified,2), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="Residuals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="NormalResiduals", xlab="Fitted Means")
LogNormalAmount = lm(Amount ~ poly(Year,2) + Organisation.Type + Area + poly(Classified,2), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab="Fitted Means")
LogNormalAmount = lm(Amount ~ poly(Year,4) + Organisation.Type + Area + poly(Classified,4), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab="Fitted Means")
LogNormalAmount = loglm(Amount ~ poly(Year,4) + Organisation.Type + Area + poly(Classified,4), data = UML)
LogNormalAmount = lm(log(Amount) ~ poly(Year,4) + Organisation.Type + Area + poly(Classified,4), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab="Fitted Means")
NormalAmount = lm(Amount ~ poly(Year,2) + Organisation.Type + Area + poly(Classified,2), data = UML)
qqnorm(residuals(NormalAmount), pch=16, ylab="NormalAmountResiduals", xlab = "Amount")
qqline(residuals(NormalAmount))
plot(residuals(NormalAmount) ~ fitted(NormalAmount), pch=16, ylab="NormalAmountResiduals", xlab="Fitted Means")
LogNormalAmount = lm(log(Amount) ~ poly(Year,3) + Organisation.Type + Area + poly(Classified,3), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab="Fitted Means")
LogNormalAmount = lm(log(Amount) ~ poly(Year,4) + Organisation.Type + Area + poly(Classified,4), data = UML)
anova(LogNormalAmount, test = "LRT")
summary(LogNormalAmount)
LogNormalAmount = lm(log(Amount) ~ poly(Year,3) + Organisation.Type + Area + poly(Classified,3), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab="Fitted Means")
LogNormalAmount = lm(log(Amount) ~ poly(Year,4) + Organisation.Type + Area + poly(Classified,4), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab="Fitted Means")
summary(LogNormalAmount)
anova(LogNormalAmount, test = "LRT")
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab="Fitted Means")
plot(residuals(GaussianAmount) ~ fitted(GaussianAmount), pch=16, ylab="GaussianResiduals", xlab="Fitted Means")
plot(table(UM$Year), main = "Distribution of Years in Unclaimed Money")
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UML = subset(UM2, Year > 1960 & Year < 2009)
plot(table(UML$Year), main = "Distribution of Years in Trimmed Data")
abline(v = 1960, col = "red")
PoissonAccounts.6 <- glm(Freq ~ Area+Organisation.Type+Year+Classified, family = quasipoisson(link = "log"), data = Counts)
UM <- read.csv("C:/Users/User/Downloads/New folder/UM.csv")
View(UM)
UM2 = na.omit(UM[,c("Amount", "Year", "Organisation.Type", "Area", "Classified")])
UML = subset(UM2, Year > 1960 & Year < 2009)
require(statmod)
TweedieAmount = glm(Amount ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=2.7), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=2.7), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means")
qqnorm(residuals(InverseGaussianAmount), pch=16, ylab="InverseResiduals", xlab = "Amount",
main="InverseGaussian")
qqline(residuals(InverseGaussianAmount))
plot(residuals(InverseGaussianAmount) ~ fitted(InverseGaussianAmount), pch=16, ylab="InverseResiduals",
InverseGaussianAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified ,
family = inverse.gaussian(link = "log"), data=UML)
qqnorm(residuals(InverseGaussianAmount), pch=16, ylab="InverseResiduals", xlab = "Amount",
main="InverseGaussian")
qqline(residuals(InverseGaussianAmount))
plot(residuals(InverseGaussianAmount) ~ fitted(InverseGaussianAmount), pch=16, ylab="InverseResiduals",
InverseGaussianAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified ,
family = inverse.gaussian(link = "log"), data=UML)
InverseGaussianAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified ,
family = inverse.gaussian(link = "log"), data=UML)
InverseGaussianAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified ,family = inverse.gaussian(link = "log"), data=UML)
qqnorm(residuals(InverseGaussianAmount), pch=16, ylab="InverseResiduals", xlab = "Amount",
main="InverseGaussian")
qqline(residuals(InverseGaussianAmount))
plot(residuals(InverseGaussianAmount) ~ fitted(InverseGaussianAmount), pch=16, ylab="InverseResiduals",
xlab="Fitted Means", main="InverseGaussian")
GaussianAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified,
family = gaussian(link = "log"), data=UML)
qqnorm(residuals(GaussianAmount), pch=16, ylab="GaussianResiduals", xlab = "Amount", main="Gaussian")
qqline(residuals(GaussianAmount))
plot(residuals(GaussianAmount) ~ fitted(GaussianAmount), pch=16, ylab="GaussianResiduals",
xlab="Fitted Means", main="Gaussian")
PoissonAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified,
family = poisson(link="log"),data=UML)
qqnorm(residuals(PoissonAmount), pch=16, ylab="PoissonResiduals", xlab = "Amount", main="Poisson")
qqline(residuals(PoissonAmount))
plot(residuals(PoissonAmount) ~ fitted(PoissonAmount), pch=16, ylab="PoissonResiduals",
xlab="Fitted Means", main="Poisson")
GammaAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified ,
family = Gamma(link = "log"), data=UML)
qqnorm(residuals(GammaAmount), pch=16, ylab="GammaResiduals", xlab = "Amount", main="Gamma")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="GammaResiduals",
xlab="Fitted Means", main="Gamma")
plot(residuals(GaussianAmount) ~ fitted(GaussianAmount), pch=16, ylab="GaussianResiduals",
xlab="Fitted Means", main="Gaussian")
InverseGaussianAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified ,
family = inverse.gaussian(link = "log"), data=UML)
qqnorm(residuals(InverseGaussianAmount), pch=16, ylab="InverseResiduals", xlab = "Amount",
main="InverseGaussian")
qqline(residuals(InverseGaussianAmount))
plot(residuals(InverseGaussianAmount) ~ fitted(InverseGaussianAmount), pch=16, ylab="InverseResiduals",
xlab="Fitted Means", main="InverseGaussian")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=2.7), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=2.9), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=3.1), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=3.9), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=4), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=5), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=10), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
,family=tweedie(link.power=0, var.power=7), data=UML)
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=7), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
TweedieAmount = glm(log(Amount) ~ Year + Organisation.Type + Area + Classified
,family=tweedie(link.power=0, var.power=4), data=UML)
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount", main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
LogNormalAmount = lm(log(Amount) ~ poly(Year,4) + Organisation.Type + Area + poly(Classified,4), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals",
xlab="Fitted Means")
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
LogNormalAmount = lm(log(Amount) ~ poly(Year,4) + Organisation.Type + Area + poly(Classified,4), data = UML)
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals", xlab = "Amount", main="LogNormal")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals",
xlab="Fitted Means", main="LogNormal")
shapiro.test(rnorm(GaussianAmount, mean = 0, sd = 2))
summary(LogNormalAmount)
anova(LogNormalAmount, test = "LRT")
UM <- read.csv("C:/Users/User/Downloads/New folder/UM.csv")
qqnorm(residuals(GaussianAmount), pch=16, ylab="GaussianResiduals", xlab = "Amount",
main="Gaussian")
qqline(residuals(GaussianAmount))
plot(residuals(GaussianAmount) ~ fitted(GaussianAmount), pch=16, ylab="GaussianResiduals",
xlab="Fitted Means", main="Gaussian")
qqnorm(residuals(PoissonAmount), pch=16, ylab="PoissonResiduals", xlab = "Amount",
main="Poisson")
qqline(residuals(PoissonAmount))
plot(residuals(PoissonAmount) ~ fitted(PoissonAmount), pch=16, ylab="PoissonResiduals",
xlab="Fitted Means", main="Poisson")
qqnorm(residuals(GammaAmount), pch=16, ylab="GammaResiduals", xlab = "Amount",
main="Gamma")
qqline(residuals(GammaAmount))
plot(residuals(GammaAmount) ~ fitted(GammaAmount), pch=16, ylab="GammaResiduals",
xlab="Fitted Means", main="Gamma")
qqnorm(residuals(InverseGaussianAmount), pch=16, ylab="InverseResiduals", xlab = "Amount",
main="InverseGaussian")
qqline(residuals(InverseGaussianAmount))
plot(residuals(InverseGaussianAmount) ~ fitted(InverseGaussianAmount), pch=16,
ylab="InverseResiduals", xlab="Fitted Means", main="InverseGaussian")
qqnorm(residuals(TweedieAmount), pch=16, ylab="TweedieResiduals", xlab = "Amount",
main="Tweedie")
qqline(residuals(TweedieAmount))
plot(residuals(TweedieAmount) ~ fitted(TweedieAmount), pch=16, ylab="TweedieResiduals",
xlab="Fitted Means", main="Tweedie")
qqnorm(residuals(LogNormalAmount), pch=16, ylab="LogNormalAmountResiduals",
xlab = "Amount", main="LogNormal")
qqline(residuals(LogNormalAmount))
plot(residuals(LogNormalAmount) ~ fitted(LogNormalAmount), pch=16,
ylab="LogNormalAmountResiduals", xlab="Fitted Means", main="LogNormal")
anova(LogNormalAmount, test = "LRT")
![Description Pie](http://imgur.com/1kcQiB4)
! [Description Pie] (http://imgur.com/1kcQiB4)
! (http://imgur.com/1kcQiB4)
#![Description Pie](http://i.imgur.com/PsQCM2m.png)
#![Description Pie](https://imgur.com/1kcQiB4)
![alt text](figures/img.png)
setwd("C:/Users/User/Downloads/New folder")
png(file = ./output/Distribution_of_Years.jpg)
png(file = /output/Distribution_of_Years.jpg)
png(file = output/Distribution_of_Years.jpg)
png(file = Distribution_of_Years.jpg)
png(Distribution_of_Years.jpg)
png(filename = Distribution_of_Years.jpg)
png(filename = "Distribution_of_Years.jpg")
plot(1:10)
plot(1:10)
png(filename = "Distribution_of_Years.jpg")
plot(1:10)
png(filename = "Distribution_of_Years.png")
plot(1:10)
setwd("~/GitHub/UM/R")
setwd("~/GitHub/UM")
png("figs/Distribution_of_Years.png")
plot(1:10 ~ 1:10)
png("figs/Distribution_of_Years.png")
plot(table(UM$Year), main = "Distribution of Years in Unclaimed Money")
UMoriginal <- read.csv("~/GitHub/UM/output/UMoriginal.csv")
View(UMoriginal)
UMoriginal = UM
UM = UMoriginal
png("figs/Distribution_of_Years.png")
plot(table(UM$Year), main = "Distribution of Years in Unclaimed Money")
abline(v = 1960, col = "red")
abline(v = 2008, col = "red")
dev.off()
